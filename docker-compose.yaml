---
version: "3.5"

# volumes:
#   prometheus_data: {}
#   grafana_data: {}
#   postgresql_data: {}
#   rabbitmq_data: {}

# networks:
#   development:

services:
  # Database
  postgresql:
    container_name: postgresql
    privileged: true
    image: postgres:11
    network_mode: bridge
    # networks:
    #   - development
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_DB: postgres
    ports:
      - 5432:5432
    restart: always

  # Queue system
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    network_mode: bridge
    # networks:
    #   - development
    ports:
      - 5672:5672
      - 15672:15672
    restart: always

  # Monitoring
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.26.0
    privileged: true
    network_mode: bridge
    # networks:
    #   - development
    links:
      - mq-to-db-01
      - mq-to-db-02
    user: root
    volumes:
      - ./docker-compose/prometheus/:/etc/prometheus/:Z
      #- prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - 9090:9090
    restart: always

  grafana:
    container_name: grafana
    image: grafana/grafana:7.5.4
    privileged: true
    network_mode: bridge
    # networks:
    #   - development
    links:
      - prometheus
    environment:
      GF_AUTH_BASIC_ENABLED: "false"
      GF_AUTH_ANONYMOUS_ENABLED: "true"
    volumes:
      - ./docker-compose/grafana/provisioning/:/etc/grafana/provisioning/
      - ./docker-compose/grafana/dashboards/:/grafana/dashboards/mq-to-db/:Z
      #- grafana_data:/var/lib/grafana
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    restart: always

  # mq-to-db
  mq-to-db-01:
    container_name: mq-to-db-01
    privileged: true
    network_mode: bridge
    # networks:
    #   - development
    build:
      dockerfile: Dockerfile
      context: ./
      args:
        METRICS_PORT: 8080
        GO_VERSION: 1.17
    volumes:
      - ./docker-compose/mq-to-db/config.yaml:/home/nobody/config.yaml:Z
    environment:
      SERVER_ADDRESS: 0.0.0.0 # means all the ips into the container
      SERVER_PORT: 8080
      #LOGLEVEL: fatal # as a env var
    command:
      - --profile
      - --logLevel=info # as a container arg
      #- --debug
    ports:
      - 8080:8080
    links:
      - postgresql
      - rabbitmq
    depends_on:
      - postgresql
      - rabbitmq
    restart: always

  mq-to-db-02:
    container_name: mq-to-db-02
    privileged: true
    network_mode: bridge
    # networks:
    #   - development
    build:
      dockerfile: Dockerfile
      context: ./
      args:
        METRICS_PORT: 8081
        GO_VERSION: 1.17
    volumes:
      - ./docker-compose/mq-to-db/config.yaml:/home/nobody/config.yaml
    environment:
      SERVER_ADDRESS: 0.0.0.0 # means all the ips into the container
      SERVER_PORT: 8081
      #LOGLEVEL: fatal # as a env var
    command:
      - --profile
      - --logLevel=info # as a container arg
      #- --debug
    ports:
      - 8081:8081
    links:
      - postgresql
      - rabbitmq
    depends_on:
      - postgresql
      - rabbitmq
    restart: always
